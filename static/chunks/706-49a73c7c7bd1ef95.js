"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[706],{9706:(e,n,s)=>{s.d(n,{A:()=>t});let t=[{title:"Fizz Buzz",slug:"fizz-buzz",level:1,levelName:"easy",tags:["easy"],code:"function fizzBuzz(num) {\n    // your code below\n    \n    \n\n    \n    // your code above\n}",description:'Write a program that prints the numbers from 1 to the passed param. But for multiples of 3 print "Fizz" instead of the number and for the multiples of 5 print "Buzz". For numbers which are multiples of both 3 and 5 print "FizzBuzz".',test:function(e){let n=[],s=console.log,t=[];console.log=e=>t.push(e);try{Function(e+"; return fizzBuzz;")()(15),n.push({passed:"Fizz"===t[2],message:'fizzBuzz(3) should log "Fizz" instead of '.concat(t[2])}),n.push({passed:"Buzz"===t[4],message:'fizzBuzz(5) should log "Buzz" instead of '.concat(t[4])}),n.push({passed:"FizzBuzz"===t[14],message:'fizzBuzz(15) should log "FizzBuzz" instead of '.concat(t[14])}),n.push({passed:"1"===t[0]||1===t[0],message:'fizzBuzz(1) should log "1" instead of '.concat(t[0])}),n.push({passed:"2"===t[1]||2===t[1],message:'fizzBuzz(2) should log "2" instead of '.concat(t[2])}),n.push({passed:"4"===t[3]||4===t[3],message:'fizzBuzz(4) should log "4" instead of '.concat(t[3])})}catch(e){n.push({passed:!1,message:"Error: ".concat(null==e?void 0:e.message)})}return console.log=s,n},solution:'function fizzBuzz(num) {\n    for (let i = 1; i <= num; i++) {\n        if (i % 15 === 0) {\n            console.log("FizzBuzz");\n        } else if (i % 3 === 0) {\n            console.log("Fizz");\n        } else if (i % 5 === 0) {\n            console.log("Buzz");\n        } else {\n            console.log(i);\n        }\n    }\n}',examples:["fizzBuzz(15) -> console.log(1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz');"]},{title:"Reverse a String",slug:"reverse-string",level:1,levelName:"easy",tags:["easy"],code:"function reverseString(str) {\n  // your code below\n  \n  \n\n  \n  // your code above\n}",description:"Write a function that reverses a string.",test:function(e){let n=[];try{let s=Function(e+"; return reverseString;")();n.push({passed:"olleh"===s("hello"),message:"reverseString('hello') should return 'olleh'"}),n.push({passed:"dlrow"===s("world"),message:"reverseString('world') should return 'dlrow'"}),n.push({passed:"racecar"===s("racecar"),message:"reverseString('racecar') should return 'racecar'"}),n.push({passed:"54321"===s("12345"),message:"reverseString('12345') should return '54321'"})}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}return n},solution:"function reverseString(str) {\n  return str.split('').reverse().join('');\n}",examples:["reverseString('hello') -> 'olleh';","reverseString('world') -> 'dlrow';","reverseString('racecar') -> 'racecar';","reverseString('12345') -> '54321';"]},{title:"Palindrome",slug:"palindrome",level:1,levelName:"easy",tags:["easy"],code:"function isPalindrome(str) {\n  // your code below\n  \n  \n\n  \n  // your code above\n}",description:"Write a function that determines if a string is a palindrome.",test:function(e){let n=[];try{let s=Function(e+"; return isPalindrome;")();for(let{input:e,expected:t}of[{input:"racecar",expected:!0},{input:"hello",expected:!1},{input:"A man a plan a canal Panama",expected:!0},{input:"No lemon no melon",expected:!0},{input:"Was it a car or a cat I saw",expected:!0}]){let a=s(e);n.push({passed:a===t,message:'Input: "'.concat(e,'", Expected: ').concat(t,", Got: ").concat(a)})}}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}return n},solution:"function isPalindrome(str) {\n  const reversed = str.replace(/\\W/g, '').toLowerCase().split('').reverse().join('');\n  return str.replace(/\\W/g, '').toLowerCase() === reversed;\n}",examples:["isPalindrome('racecar') -> true;","isPalindrome('hello') -> false;","isPalindrome('A man a plan a canal Panama') -> true;","isPalindrome('No lemon no melon') -> true;","isPalindrome('Was it a car or a cat I saw') -> true;"]},{title:"Reverse Integer",slug:"reverse-integer",level:1,levelName:"easy",tags:["easy"],code:"function reverseInteger(num) {\n    // your code below\n    \n    \n  \n    \n    // your code above\n  }",description:"Write a function that reverses an integer.",test:function(e){let n=[];try{let s=Function(e+"; return reverseInteger;")();n.push({passed:321===s(123),message:"reverseInteger(123) should return 321"}),n.push({passed:-654===s(-456),message:"reverseInteger(-456) should return -654"}),n.push({passed:1===s(1e3),message:"reverseInteger(1000) should return 1"}),n.push({passed:0===s(0),message:"reverseInteger(0) should return 0"})}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}return n},solution:"function reverseInteger(num) {\n    const reversed = parseInt(num.toString().split('').reverse().join(''), 10);\n    return Math.sign(num) * reversed;\n}",examples:["reverseInt(123) -> 321;","reverseInt(-456) -> -654;","reverseInt(1000) -> 1;","reverseInt(0) -> 0;"]},{title:"Anagram",slug:"anagram",level:1,levelName:"easy",tags:["easy"],code:"function anagram(stringA, stringB) {\n    // your code below\n    \n    \n  \n    \n    // your code above\n  }",description:"Check if two strings are anagrams of each other. An anagram uses the same characters in the same quantity. Ignore spaces, punctuation, and case differences.",test:function(e){let n=[];try{let s=Function(e+"; return anagram;")();n.push({passed:!0===s("listen","silent"),message:"Basic anagram"}),n.push({passed:!1===s("hello","world"),message:"Not an anagram"}),n.push({passed:!1===s("abc","abcd"),message:"Different lengths"}),n.push({passed:!0===s("Listen","Silent"),message:"Anagram with different cases"}),n.push({passed:!0===s("conversation","voices rant on"),message:"Anagram with spaces"})}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}return n},solution:"function anagram(stringA, stringB) {\n    function cleanString(str) {\n      return str\n        .toLowerCase()\n        .replace(/\\s/g, '')\n        .replace(/\\W/g, '')\n        .split('')\n        .sort()\n        .join('');\n    }\n    \n    return cleanString(stringA) === cleanString(stringB);\n  }",examples:["anagram('listen', 'silent') -> true;","anagram('hello', 'world') -> false;","anagram('abc', 'abcd') -> false;","anagram('Listen', 'Silent') -> true;","anagram('conversation', 'voices rant on') -> true;"]},{title:"Capitalize",slug:"capitalize",level:1,levelName:"easy",tags:["easy"],code:"function capitalize(str) {\n    // your code below\n    \n    \n  \n    \n    // your code above\n  }",description:"Write a function that accepts a string. The function should capitalize the first letter of each word in the string then return the capitalized string.",test:function(e){let n=[];try{let s=Function(e+"; return capitalize;")();[{input:"hello",expected:"Hello"},{input:"world",expected:"World"},{input:"a short sentence",expected:"A Short Sentence"},{input:"this is a test",expected:"This Is A Test"}].forEach(e=>{let{input:t,expected:a}=e;try{let e=s(t);n.push({passed:e===a,message:'Input: "'.concat(t,'", Expected: "').concat(a,'", Got: "').concat(e,'"')})}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}})}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}return n},solution:"function capitalize(str) {\n  let result = str[0].toUpperCase();\n\n  for (let i = 1; i < str.length; i++) {\n    if (str[i - 1] === ' ') {\n      result += str[i].toUpperCase();\n    } else {\n      result += str[i];\n    }\n  }\n\n  return result;\n}",examples:["capitalize('hello') -> 'Hello';","capitalize('world') -> 'World';","capitalize('a short sentence') -> 'A Short Sentence';","capitalize('this is a test') -> 'This Is A Test';"]},{title:"Array Chunking",slug:"chank",level:2,levelName:"medium",tags:["medium"],code:"function chank(arr, size) {\n    // your code below\n    \n    \n  \n    \n    // your code above\n  }",description:"Write a function that takes an array and chunk size as arguments and returns an array of arrays where each subarray has at most the specified number of elements.",test:function(e){let n=[];try{let s=Function(e+"; return chank;")();n.push({passed:JSON.stringify(s([1,2,3,4],2))===JSON.stringify([[1,2],[3,4]]),message:"Basic functionality"}),n.push({passed:JSON.stringify(s([1,2,3,4,5],2))===JSON.stringify([[1,2],[3,4],[5]]),message:"Uneven chunks"}),n.push({passed:JSON.stringify(s([],2))===JSON.stringify([]),message:"Empty array"}),n.push({passed:JSON.stringify(s([1,2],5))===JSON.stringify([[1,2]]),message:"Chunk size larger than array"}),n.push({passed:JSON.stringify(s([1,2,3],1))===JSON.stringify([[1],[2],[3]]),message:"Chunk size of 1"})}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}return n},solution:"function chank(arr, size) {\n    const result = [];\n    let chank = [];\n\n    for (const item of arr) {\n      chank.push(item);\n      if (chank.length === size) {\n        result.push(chank);\n        chank = [];\n      }\n    }\n    if (chank.length > 0) {\n      result.push(chank);\n    }\n    return result;\n    \n  }",examples:["chank([1, 2, 3, 4], 2) -> [[1, 2], [3, 4]];","chank([1, 2, 3, 4, 5], 2) -> [[1, 2], [3, 4], [5]];","chank([], 2) -> [];","chank([1, 2], 5) -> [[1, 2]];","chank([1, 2, 3], 1) -> [[1], [2], [3]];"]},{title:"Max Char",slug:"maxchar",level:2,levelName:"medium",tags:["medium"],code:"function maxChar(str) {\n    // your code below\n    \n    \n  \n    \n    // your code above\n  }",description:"Given a string, return the character that is most commonly used in the string.",test:function(e){let n=[];try{let s=Function(e+"; return maxChar;")();[{input:"a",expected:"a"},{input:"Hello",expected:"l"},{input:"abcccccccd",expected:"c"},{input:"apple 1231111",expected:"1"}].forEach(e=>{let{input:t,expected:a}=e,r=s(t);n.push({passed:r===a,message:'Input: "'.concat(t,'", Expected: "').concat(a,'", Got: "').concat(r,'"')})})}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}return n},solution:"function maxChar(str) {\n\n  const map = {};\n    let maxChar;\n    let maxNum = 0\n\n    str.replace(/s/g, '').toLowerCase().split('').forEach(char => {\n      map[char] = map[char] + 1 || 1;\n    });\n    \n    for(const char in map) {\n      if (map[char] > maxNum) {\n        maxChar = char;\n        maxNum = map[char];\n      }\n    }\n  \n    return maxChar;\n    \n  }",examples:["maxChar('a') -> 'a'","maxChar('Hello') -> 'l'","maxChar('abcccccccd') -> 'c'","maxChar('apple 1231111') -> '1'"]},{title:"Mario",slug:"mario",level:1,levelName:"easy",tags:["easy"],code:"function mario(n) {\n    // your code below\n    \n    \n  \n    \n    // your code above\n  }",description:"Write a function `mario` that takes a number `n` and prints a right-aligned staircase of height `n` using the `#` character.",test:function(e){let n=[],s=console.log,t=[];console.log=e=>t.push(e);try{let s=Function(e+"; return mario;")();s(1),n.push({passed:"#\n"===t[0],message:'mario(1) should log "#" instead of '.concat(t[0])}),t.length=0,s(2),n.push({passed:"# \n##\n"===t[0],message:'mario(2) should log "# \n##\n" instead of '.concat(t[0])}),t.length=0,s(3),n.push({passed:"#  \n## \n###\n"===t[0],message:'mario(2) should log "#  \n## \n###\n" instead of '.concat(t[0])}),t.length=0}catch(e){n.push({passed:!1,message:"Error: ".concat(e instanceof Error?e.message:String(e))})}return console.log=s,n},solution:"function mario(n) {\n    let str = '';\n\n    for (var i = 1; i <= n; i++) {\n      str += new Array(i).fill('#').join('').padEnd(n, ' ') + '\\n';\n    }\n\n    console.log(str);\n  }",examples:["mario(1) -> console.log('#\\n');","mario(2) -> console.log('# \\n##\\n');","mario(3) -> console.log('#  \\n## \\n###\\n');"]}].map((e,n)=>({...e,index:n+1}))}}]);